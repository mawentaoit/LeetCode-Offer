/**
 * 题目一：滑动窗口的最大值
 * 给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。
*/
/**
 * 方法一：暴力法
 * 每个滑动窗口都计算最大值
 * O(nk), O(1), k为滑动窗口的长度
 */
/**
 * 方法二：用一个双端队列来存各阶段的最大值
 * 用O(1)时间得到滑动窗口的最大值，队列最大长度为k
 * O(n), O(k)
 */
class Solution{
public:
    vector<int> maxInWindows(const vector<int>& num, unsigned int size) {
        vector<int> result;
        if(size > num.size() || size < 1) return result;
        deque<int> index; //双端队列
        //队列中存的元素中，队首元素为当前窗口下的最大值,
    }
};